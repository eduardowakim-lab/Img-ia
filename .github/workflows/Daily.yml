name: Imagem do Dia

on:
  schedule:
    - cron: "0 11 * * *"   # 08:00 America/Sao_Paulo
  workflow_dispatch: {}

jobs:
  run-daily:
    runs-on: ubuntu-latest
    steps:
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip requests

      - name: Gerar e enviar imagem (com tratamento de erro)
        run: |
          cat > script.py <<'EOF'
          import os, time, json, base64, requests, smtplib, mimetypes, sys
          from email.message import EmailMessage
          from datetime import datetime, timezone, timedelta

          # ---- Config ----
          OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
          PROMPT   = os.getenv("PROMPT", "Um nascer do sol nas montanhas do Brasil, estilo realista")
          SIZE     = os.getenv("IMG_SIZE", "1024x1024")   # 512x512 | 1024x1024 | 2048x2048
          N_IMAGES = int(os.getenv("N_IMAGES", "1"))
          OUT_NAME = "daily.png"

          SMTP_USER = os.getenv("SMTP_USER")
          SMTP_PASS = os.getenv("SMTP_PASS")
          SMTP_TO   = os.getenv("SMTP_TO")
          SMTP_HOST = os.getenv("SMTP_HOST", "smtp.gmail.com")
          SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))

          # Verificação de envs obrigatórios (lista quais faltam)
          required = ("OPENAI_API_KEY","SMTP_USER","SMTP_PASS","SMTP_TO")
          missing = [k for k in required if not os.getenv(k)]
          if missing:
            print("Faltando variáveis: " + ", ".join(missing), file=sys.stderr)
            sys.exit(1)

          # Endpoint para geração de imagens
          url = "https://api.openai.com/v1/images/generations"
          headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json",
          }
          # Sem 'response_format' e sem 'quality' para evitar 400
          payload = {
            "model": "gpt-image-1",
            "prompt": PROMPT,
            "size": SIZE,
            "n": N_IMAGES
          }

          def try_generate(max_retries=3, delay=15):
            for i in range(1, max_retries+1):
              print(f"[OpenAI] Tentativa {i}/{max_retries}…")
              r = requests.post(url, headers=headers, json=payload, timeout=180)
              if r.status_code != 200:
                print(f"[OpenAI] HTTP {r.status_code}: {r.text[:500]}")
                if i < max_retries:
                  print(f"[OpenAI] Aguardando {delay}s e tentando de novo…")
                  time.sleep(delay)
                  continue
                else:
                  raise SystemExit("Falha ao gerar imagem.")

              data = r.json()
              if not data.get("data"):
                print("[OpenAI] Resposta inesperada:", json.dumps(data)[:500])
                if i < max_retries:
                  time.sleep(delay)
                  continue
                raise SystemExit("Sem dados de imagem na resposta.")

              # Aceita b64_json OU url
              item = data["data"][0]
              if "b64_json" in item:
                b64 = item["b64_json"]
                with open(OUT_NAME, "wb") as f:
                  f.write(base64.b64decode(b64))
                print(f"[OK] Imagem salva em {OUT_NAME} (via b64).")
                return OUT_NAME
              elif "url" in item:
                img_url = item["url"]
                img = requests.get(img_url, timeout=180)
                img.raise_for_status()
                with open(OUT_NAME, "wb") as f:
                  f.write(img.content)
                print(f"[OK] Imagem salva em {OUT_NAME} (via url).")
                return OUT_NAME
              else:
                print("[OpenAI] Item sem b64_json nem url:", item)
                if i < max_retries:
                  time.sleep(delay)
                  continue
                raise SystemExit("Formato de resposta não suportado.")
            raise SystemExit("Falha após múltiplas tentativas.")

          # Geração
          img_path = try_generate()

          # Envio por e-mail
          msg = EmailMessage()
          msg["Subject"] = "Imagem do dia"
          msg["From"] = SMTP_USER
          msg["To"] = SMTP_TO
          tz = timezone(timedelta(hours=-3))  # America/Sao_Paulo
          msg.set_content(
            f"Gerado em {datetime.now(tz):%d/%m/%Y %H:%M}\n"
            f"Modelo: gpt-image-1\nPrompt: {PROMPT}\n"
            f"Tamanho: {SIZE}"
          )

          ctype, _ = mimetypes.guess_type(img_path)
          if not ctype:
            ctype = "image/png"
          maintype, subtype = ctype.split("/", 1)
          with open(img_path, "rb") as f:
            msg.add_attachment(f.read(), maintype=maintype, subtype=subtype, filename=img_path)

          with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as s:
            s.starttls()
            s.login(SMTP_USER, SMTP_PASS)
            s.send_message(msg)
          print("E-mail enviado com sucesso!")
          EOF

          python script.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SMTP_USER:  ${{ secrets.SMTP_USER }}
          SMTP_PASS:  ${{ secrets.SMTP_PASS }}
          SMTP_TO:    ${{ vars.SMTP_TO }}
          PROMPT:     ${{ vars.PROMPT }}
          IMG_SIZE:   ${{ vars.IMG_SIZE }}     # ex: 1024x1024
          N_IMAGES:   ${{ vars.N_IMAGES }}     # ex: 1
          SMTP_HOST:  ${{ vars.SMTP_HOST }}    # opcional
          SMTP_PORT:  ${{ vars.SMTP_PORT }}    # opcional
