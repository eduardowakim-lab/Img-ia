name: Imagem do Dia

on:
  schedule:
    - cron: "0 11 * * *"   # 08:00 America/Sao_Paulo
  workflow_dispatch: {}

jobs:
  run-daily:
    runs-on: ubuntu-latest
    steps:
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip requests

      - name: Gerar e enviar imagem (com tratamento de erro e SMTP debug)
        run: |
          cat > script.py <<'EOF'
          import os, time, json, base64, requests, smtplib, mimetypes, sys, traceback
          from email.message import EmailMessage
          from datetime import datetime, timezone, timedelta

          # ---- Config (com defaults seguros) ----
          OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
          PROMPT   = os.getenv("PROMPT") or "Um nascer do sol nas montanhas do Brasil, estilo realista"
          SIZE     = os.getenv("IMG_SIZE") or "1024x1024"

          try:
              N_IMAGES = int(os.getenv("N_IMAGES") or 1)
          except ValueError:
              N_IMAGES = 1

          OUT_NAME = "daily.png"

          SMTP_USER = os.getenv("SMTP_USER")
          SMTP_PASS = os.getenv("SMTP_PASS")
          SMTP_TO   = (os.getenv("SMTP_TO") or "").strip()
          SMTP_HOST = os.getenv("SMTP_HOST") or "smtp.gmail.com"
          try:
              SMTP_PORT = int(os.getenv("SMTP_PORT") or 587)
          except ValueError:
              SMTP_PORT = 587

          # Verificação de envs obrigatórios (lista quais faltam)
          required = ("OPENAI_API_KEY","SMTP_USER","SMTP_PASS","SMTP_TO")
          missing = [k for k in required if not os.getenv(k)]
          if missing:
              print("Faltando variáveis: " + ", ".join(missing), file=sys.stderr)
              sys.exit(1)

          if "@" not in SMTP_TO:
              print(f"SMTP_TO inválido: '{SMTP_TO}'", file=sys.stderr)
              sys.exit(1)

          # Endpoint para geração de imagens
          url = "https://api.openai.com/v1/images/generations"
          headers = {
              "Authorization": f"Bearer {OPENAI_API_KEY}",
              "Content-Type": "application/json",
          }
          payload = {
              "model": "gpt-image-1",
              "prompt": PROMPT,
              "size": SIZE,
              "n": N_IMAGES
          }

          def try_generate(max_retries=3, delay=15):
              for i in range(1, max_retries+1):
                  print(f"[OpenAI] Tentativa {i}/{max_retries}…")
                  r = requests.post(url, headers=headers, json=payload, timeout=180)
                  if r.status_code != 200:
                      print(f"[OpenAI] HTTP {r.status_code}: {r.text[:500]}")
                      if i < max_retries:
                          print(f"[OpenAI] Aguardando {delay}s e tentando de novo…")
                          time.sleep(delay)
                          continue
                      raise SystemExit("Falha ao gerar imagem.")

                  data = r.json()
                  if not data.get("data"):
                      print("[OpenAI] Resposta inesperada:", json.dumps(data)[:500])
                      if i < max_retries:
                          time.sleep(delay)
                          continue
                      raise SystemExit("Sem dados de imagem na resposta.")

                  item = data["data"][0]
                  if "b64_json" in item:
                      b64 = item["b64_json"]
                      with open(OUT_NAME, "wb") as f:
                          f.write(base64.b64decode(b64))
                      print(f"[OK] Imagem salva em {OUT_NAME} (via b64).")
                      return OUT_NAME
                  elif "url" in item:
                      img_url = item["url"]
                      img = requests.get(img_url, timeout=180)
                      img.raise_for_status()
                      with open(OUT_NAME, "wb") as f:
                          f.write(img.content)
                      print(f"[OK] Imagem salva em {OUT_NAME} (via url).")
                      return OUT_NAME
                  else:
                      print("[OpenAI] Item sem b64_json nem url:", item)
                      if i < max_retries:
                          time.sleep(delay)
                          continue
                      raise SystemExit("Formato de resposta não suportado.")
              raise SystemExit("Falha após múltiplas tentativas.")

          # Geração
          img_path = try_generate()

          # Monta e-mail
          msg = EmailMessage()
          msg["Subject"] = "Imagem do dia"
          msg["From"] = SMTP_USER  # Para Gmail, o From deve ser o mesmo da conta autenticada
          msg["To"] = SMTP_TO
          tz = timezone(timedelta(hours=-3))  # America/Sao_Paulo
          msg.set_content(
              f"Gerado em {datetime.now(tz):%d/%m/%Y %H:%M}\n"
              f"Modelo: gpt-image-1\nPrompt: {PROMPT}\n"
              f"Tamanho: {SIZE}\nImagens: {N_IMAGES}"
          )

          ctype, _ = mimetypes.guess_type(img_path)
          if not ctype:
              ctype = "image/png"
          maintype, subtype = ctype.split("/", 1)
          with open(img_path, "rb") as f:
              msg.add_attachment(f.read(), maintype=maintype, subtype=subtype, filename=img_path)

          # Envio por SMTP (com debug e erros explícitos)
          try:
              s = smtplib.SMTP(SMTP_HOST, SMTP_PORT, timeout=60)
              s.set_debuglevel(1)  # <-- log do diálogo SMTP
              s.ehlo()
              if SMTP_PORT == 587:
                  s.starttls()
                  s.ehlo()
              s.login(SMTP_USER, SMTP_PASS)
              refused = s.send_message(msg)
              s.quit()
          except smtplib.SMTPAuthenticationError as e:
              print("Falha na autenticação SMTP. Use senha de app se for Gmail.", file=sys.stderr)
              print(e.smtp_code, e.smtp_error, file=sys.stderr)
              sys.exit(1)
          except smtplib.SMTPRecipientsRefused as e:
              print("Destinatário recusado pelo servidor SMTP.", file=sys.stderr)
              print(str(e), file=sys.stderr)
              sys.exit(1)
          except smtplib.SMTPSenderRefused as e:
              print("Remetente recusado pelo servidor SMTP. O 'From' deve ser igual ao login.", file=sys.stderr)
              print(str(e), file=sys.stderr)
              sys.exit(1)
          except smtplib.SMTPDataError as e:
              print("SMTPDataError ao enviar o e-mail.", file=sys.stderr)
              print(e.smtp_code, e.smtp_error, file=sys.stderr)
              sys.exit(1)
          except Exception:
              print("Erro inesperado ao enviar e-mail:\n" + traceback.format_exc(), file=sys.stderr)
              sys.exit(1)

          if refused:
              # send_message retorna dict de recusados; vazio = tudo OK
              print(f"Aviso: servidor recusou alguns destinatários: {refused}", file=sys.stderr)
              sys.exit(1)

          print("E-mail enviado com sucesso! (servidor aceitou a mensagem)")
          EOF

          python script.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SMTP_USER:  ${{ secrets.SMTP_USER }}
          SMTP_PASS:  ${{ secrets.SMTP_PASS }}
          SMTP_TO:    ${{ vars.SMTP_TO }}
          PROMPT:     ${{ vars.PROMPT }}
          IMG_SIZE:   ${{ vars.IMG_SIZE }}     # ex: 1024x1024
          N_IMAGES:   ${{ vars.N_IMAGES }}     # se vazio, cai em 1 no script
          SMTP_HOST:  ${{ vars.SMTP_HOST }}    # opcional (default: smtp.gmail.com)
          SMTP_PORT:  ${{ vars.SMTP_PORT }}    # opcional (default: 587)
