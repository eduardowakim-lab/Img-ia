name: Imagem do Dia

on:
  schedule:
    - cron: "0 11 * * *"   # 08:00 America/Sao_Paulo
  workflow_dispatch: {}

jobs:
  run-daily:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip requests feedparser

      - name: Gerar imagem e enviar e-mail (legenda IG + anexos)
        timeout-minutes: 15
        run: |
          cat > script.py <<'EOF'
          import os, time, json, base64, requests, smtplib, mimetypes, sys, traceback, feedparser
          from email.message import EmailMessage
          from datetime import datetime, timezone, timedelta
          from requests.adapters import HTTPAdapter
          from urllib3.util.retry import Retry
          from urllib.parse import quote_plus

          # ---- Config ----
          OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
          PROMPT   = os.getenv("PROMPT") or "Um nascer do sol nas montanhas do Brasil, estilo realista"
          SIZE     = os.getenv("IMG_SIZE") or "1024x1024"
          NEWS_QUERY = (os.getenv("NEWS_QUERY") or "").strip()

          try:
              N_IMAGES = int(os.getenv("N_IMAGES") or 1)
          except ValueError:
              N_IMAGES = 1

          OUT_NAME = "daily.png"

          SMTP_USER = os.getenv("SMTP_USER")
          SMTP_PASS = os.getenv("SMTP_PASS")
          SMTP_TO   = (os.getenv("SMTP_TO") or "").strip()
          SMTP_HOST = os.getenv("SMTP_HOST") or "smtp.gmail.com"
          try:
              SMTP_PORT = int(os.getenv("SMTP_PORT") or 587)
          except ValueError:
              SMTP_PORT = 587

          # Envs obrigatórios
          required = ("OPENAI_API_KEY","SMTP_USER","SMTP_PASS","SMTP_TO")
          missing = [k for k in required if not os.getenv(k)]
          if missing:
              print("Faltando variáveis: " + ", ".join(missing), file=sys.stderr)
              sys.exit(1)

          if "@" not in SMTP_TO:
              print(f"SMTP_TO inválido: '{SMTP_TO}'", file=sys.stderr)
              sys.exit(1)

          # ---- Sessão HTTP robusta ----
          def session_with_retries():
              retry = Retry(
                  total=6, connect=3, read=3,
                  backoff_factor=1.5,
                  status_forcelist=(408,409,429,500,502,503,504),
                  allowed_methods=frozenset(["GET","POST"])
              )
              adapter = HTTPAdapter(max_retries=retry, pool_maxsize=20)
              s = requests.Session()
              s.mount("https://", adapter)
              s.mount("http://", adapter)
              s.headers.update({"Connection": "close"})
              return s

          HTTP_TIMEOUT = (15, 360)

          # ---- Buscar notícia ----
          def fetch_top_news():
              if NEWS_QUERY:
                  url = f"https://news.google.com/rss/search?q={quote_plus(NEWS_QUERY)}&hl=pt-BR&gl=BR&ceid=BR:pt-419"
              else:
                  url = "https://news.google.com/rss?hl=pt-BR&gl=BR&ceid=BR:pt-419"
              print(f"[news] Feed: {url}")
              s = session_with_retries()
              r = s.get(url, timeout=(10, 30))
              r.raise_for_status()
              feed = feedparser.parse(r.content)
              if not feed.entries:
                  raise SystemExit("Não foi possível obter notícias.")
              e = feed.entries[0]
              title = (e.get("title") or "").strip()
              summary = (e.get("summary") or e.get("description") or "").strip().replace("\n"," ")
              link = (e.get("link") or "").strip()
              print(f"[news] Título: {title}")
              print(f"[news] Link: {link}")
              return {"title": title, "summary": summary, "link": link}

          # ---- Geração de imagem ----
          def generate_image():
              s = session_with_retries()
              url = "https://api.openai.com/v1/images/generations"
              headers = {"Authorization": f"Bearer {OPENAI_API_KEY}","Content-Type": "application/json"}
              payload = {"model":"gpt-image-1","prompt":PROMPT,"size":SIZE,"n":N_IMAGES}
              print(f"[img] Gerando imagem com size={SIZE} n={N_IMAGES}")
              r = s.post(url, headers=headers, json=payload, timeout=HTTP_TIMEOUT)
              if r.status_code != 200:
                  print("[img] Erro:", r.text, file=sys.stderr)
                  r.raise_for_status()
              data = r.json()
              item = data["data"][0]
              if "b64_json" in item:
                  with open(OUT_NAME,"wb") as f: f.write(base64.b64decode(item["b64_json"]))
              elif "url" in item:
                  img = s.get(item["url"], timeout=HTTP_TIMEOUT); img.raise_for_status()
                  with open(OUT_NAME,"wb") as f: f.write(img.content)
              else:
                  raise SystemExit("Formato de resposta inesperado.")
              print(f"[img] OK -> {OUT_NAME}")
              return OUT_NAME

          # ---- Geração de legenda ----
          def generate_caption(news):
              s = session_with_retries()
              url = "https://api.openai.com/v1/chat/completions"
              headers = {"Authorization": f"Bearer {OPENAI_API_KEY}","Content-Type": "application/json"}
              sys_prompt = (
                  "Você é um redator social em PT-BR. Escreva UMA legenda curta sobre a notícia fornecida, "
                  "até 240 caracteres, 1–2 frases, sem hashtags no meio. Adicione 3–5 hashtags no final."
              )
              user_prompt = f"Título: {news['title']}\nResumo: {news['summary']}\nLink: {news['link']}"
              payload = {
                  "model":"gpt-4o-mini",
                  "messages":[
                      {"role":"system","content":sys_prompt},
                      {"role":"user","content":user_prompt}
                  ],
                  "temperature":0.8,"max_tokens":160
              }
              print("[caption] Gerando legenda…")
              r = s.post(url, headers=headers, json=payload, timeout=HTTP_TIMEOUT)
              if r.status_code!=200:
                  print("[caption] Falha:", r.text, file=sys.stderr)
                  return "Resumo do dia pronto para o feed. #noticias #hoje #brasil"
              data = r.json()
              content = data["choices"][0]["message"]["content"].strip().replace("\n"," ")
              if not content:
                  content = "Resumo do dia pronto para o feed. #noticias #hoje #brasil"
              print(f"[caption] {content}")
              return content

          # ---- Execução ----
          news = fetch_top_news()
          img_path = generate_image()
          caption = generate_caption(news)

          # ---- E-mail ----
          msg = EmailMessage()
          tz = timezone(timedelta(hours=-3))
          now_str = datetime.now(tz).strftime("%d/%m/%Y %H:%M")
          msg["Subject"] = f"Imagem do dia — legenda IG ({now_str})"
          msg["From"] = SMTP_USER
          msg["To"] = SMTP_TO

          # Corpo: legenda + link da notícia
          body = (
              "Legenda sugerida para Instagram (copie e cole):\n\n"
              f"{caption}\n\n"
              f"Fonte: {news['link']}\n"
          )
          print("[mail] Tamanho do corpo (chars):", len(body))
          msg.set_content(body)  # define o corpo ANTES dos anexos

          # Anexar a imagem
          ctype,_ = mimetypes.guess_type(img_path)
          if not ctype: ctype="image/png"
          maintype,subtype = ctype.split("/",1)
          with open(img_path,"rb") as f:
              img_bytes = f.read()
              print("[mail] Anexando imagem, bytes:", len(img_bytes))
              msg.add_attachment(img_bytes, maintype=maintype, subtype=subtype, filename=os.path.basename(img_path))

          # Anexar caption.txt
          cap_bytes = caption.encode("utf-8")
          print("[mail] Anexando caption.txt, bytes:", len(cap_bytes))
          msg.add_attachment(cap_bytes, maintype="text", subtype="plain", filename="caption.txt")

          # Anexar news.txt (título + link)
          news_txt = f"{news['title']}\n{news['link']}\n".encode("utf-8")
          print("[mail] Anexando news.txt, bytes:", len(news_txt))
          msg.add_attachment(news_txt, maintype="text", subtype="plain", filename="news.txt")

          # Envio SMTP
          try:
              s = smtplib.SMTP(SMTP_HOST, SMTP_PORT, timeout=60)
              s.set_debuglevel(1)
              s.ehlo()
              if SMTP_PORT==587:
                  s.starttls(); s.ehlo()
              s.login(SMTP_USER, SMTP_PASS)
              refused = s.send_message(msg)
              s.quit()
          except Exception:
              print("Erro SMTP:\n"+traceback.format_exc(), file=sys.stderr); sys.exit(1)

          if refused:
              print(f"Aviso: servidor recusou alguns destinatários: {refused}", file=sys.stderr); sys.exit(1)

          print("E-mail enviado com sucesso! (imagem + legenda + news.txt)")
          EOF

          python script.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SMTP_USER:  ${{ secrets.SMTP_USER }}
          SMTP_PASS:  ${{ secrets.SMTP_PASS }}
          SMTP_TO:    ${{ vars.SMTP_TO }}
          PROMPT:     ${{ vars.PROMPT }}
          IMG_SIZE:   ${{ vars.IMG_SIZE }}     # ex: 1024x1024
          N_IMAGES:   ${{ vars.N_IMAGES }}
          SMTP_HOST:  ${{ vars.SMTP_HOST }}
          SMTP_PORT:  ${{ vars.SMTP_PORT }}
          NEWS_QUERY: ${{ vars.NEWS_QUERY }}   # opcional (ex.: "NASA", "Bolsa")
