name: Imagem do Dia

on:
  schedule:
    - cron: "0 11 * * *"   # 08:00 America/Sao_Paulo
  workflow_dispatch: {}

jobs:
  run-daily:
    runs-on: ubuntu-latest
    steps:
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip requests

      - name: Gerar e enviar imagem (com tratamento de erro)
        run: |
          cat > script.py <<'EOF'
          import os, time, json, base64, requests, smtplib, mimetypes, sys
          from email.message import EmailMessage
          from datetime import datetime, timezone, timedelta

          # ---- Config ----
          OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
          PROMPT     = os.getenv("PROMPT", "Um nascer do sol nas montanhas do Brasil, estilo realista")
          SIZE       = os.getenv("IMG_SIZE", "1024x1024")
          QUALITY    = os.getenv("IMG_QUALITY", "medium")   # low | medium | high
          N_IMAGES   = int(os.getenv("N_IMAGES", "1"))
          OUT_NAME   = "daily.png"

          SMTP_USER  = os.getenv("SMTP_USER")
          SMTP_PASS  = os.getenv("SMTP_PASS")
          SMTP_TO    = os.getenv("SMTP_TO")
          SMTP_HOST  = os.getenv("SMTP_HOST", "smtp.gmail.com")
          SMTP_PORT  = int(os.getenv("SMTP_PORT", "587"))

          if not (OPENAI_API_KEY and SMTP_USER and SMTP_PASS and SMTP_TO):
            print("Faltam variáveis obrigatórias (OPENAI_API_KEY/SMTP_USER/SMTP_PASS/SMTP_TO).", file=sys.stderr)
            sys.exit(1)

          url = "https://api.openai.com/v1/images/generations"
          headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json",
          }
          payload = {
            "model": "gpt-image-1",
            "prompt": PROMPT,
            "size": SIZE,
            "quality": QUALITY,
            "n": N_IMAGES,
            "response_format": "b64_json"
          }

          def try_generate(max_retries=3, delay=15):
            for i in range(1, max_retries+1):
              print(f"[OpenAI] Tentativa {i}/{max_retries}…")
              r = requests.post(url, headers=headers, json=payload, timeout=180)
              if r.status_code != 200:
                print(f"[OpenAI] HTTP {r.status_code}: {r.text[:400]}")
                if i < max_retries:
                  time.sleep(delay)
                  continue
                raise SystemExit("Falha ao gerar imagem.")
              data = r.json()
              if not data.get("data"):
                print("[OpenAI] Resposta inesperada:", json.dumps(data)[:400])
                if i < max_retries:
                  time.sleep(delay)
                  continue
                raise SystemExit("Sem dados de imagem na resposta.")
              b64 = data["data"][0]["b64_json"]
              with open(OUT_NAME, "wb") as f:
                f.write(base64.b64decode(b64))
              print(f"[OK] Imagem salva em {OUT_NAME}.")
              return OUT_NAME
            raise SystemExit("Falha após múltiplas tentativas.")

          img_path = try_generate()

          # Envio por e-mail
          msg = EmailMessage()
          msg["Subject"] = "Imagem do dia"
          msg["From"] = SMTP_USER
          msg["To"] = SMTP_TO
          tz = timezone(timedelta(hours=-3))
          msg.set_content(
              f"Gerado em {datetime.now(tz):%d/%m/%Y %H:%M}\n"
              f"Modelo: gpt-image-1\nPrompt: {PROMPT}\n"
              f"Tamanho: {SIZE} | Qualidade: {QUALITY}"
          )

          ctype, _ = mimetypes.guess_type(img_path)
          if not ctype:
            ctype = "image/png"
          maintype, subtype = ctype.split("/", 1)
          with open(img_path, "rb") as f:
            msg.add_attachment(f.read(), maintype=maintype, subtype=subtype, filename=img_path)

          with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as s:
            s.starttls()
            s.login(SMTP_USER, SMTP_PASS)
            s.send_message(msg)
          print("E-mail enviado com sucesso!")
          EOF

          python script.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SMTP_USER:  ${{ secrets.SMTP_USER }}
          SMTP_PASS:  ${{ secrets.SMTP_PASS }}
          SMTP_TO:    ${{ vars.SMTP_TO }}
          PROMPT:     ${{ vars.PROMPT }}
          IMG_SIZE:   ${{ vars.IMG_SIZE }}     # ex: 1024x1024
          IMG_QUALITY: ${{ vars.IMG_QUALITY }} # low|medium|high
          SMTP_HOST:  ${{ vars.SMTP_HOST }}
          SMTP_PORT:  ${{ vars.SMTP_PORT }}
